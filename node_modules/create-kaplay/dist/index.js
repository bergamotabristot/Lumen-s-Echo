#!/usr/bin/env node
import I from "node:child_process";
import m from "node:fs";
import M from "node:https";
import j from "node:path";
function T() {
  if (!process.env.npm_config_user_agent) return;
  const e = process.env.npm_config_user_agent.split(" ")[0], t = e.substring(0, e.lastIndexOf("/"));
  return t === "npminstall" ? "cnpm" : t;
}
const U = {
  npm: "install",
  yarn: "add",
  pnpm: "install",
  bun: "install",
  cnpm: "install"
}, z = (e) => ({
  npm: `run ${e}`,
  yarn: `${e}`,
  pnpm: `run ${e}`,
  bun: `run ${e}`,
  cnpm: `run ${e}`
}), B = {
  npm: "npx",
  yarn: "yarn",
  pnpm: "pnpm",
  bun: "bunx",
  cnpm: "cnpm"
}, J = `import { defineConfig } from "vite";

export default defineConfig({
    build: {
        sourcemap: true,
    },
});
`, L = "3.0.0", o = T() ?? "npm", S = B[o], C = U[o], q = z("dev")[o], v = "https://raw.githubusercontent.com/marklovers/kaplay/master", G = process.cwd(), c = (e, t) => `\x1B[${e}m${t}\x1B[0m`, O = /^win/.test(process.platform), g = (e, t) => {
  console.error(c(31, e)), t && console.error(`
` + x), process.exit(1);
}, d = (e) => console.log(c(33, e)), y = (e) => {
  i.verbose && console.log(c(90, e));
}, E = (e) => O ? `"${e}"` : e, _ = [
  { long: "help", short: "h", desc: "Print this message" },
  { long: "typescript", short: "t", desc: "Use TypeScript" },
  {
    long: "desktop",
    short: "d",
    desc: "Enable packaging for desktop with tauri"
  },
  {
    long: "example",
    short: "e",
    value: "name",
    desc: "Start from an example listed on play.kaplayjs.com"
  },
  {
    long: "spaces",
    short: "s",
    value: "level",
    desc: "Use spaces instead of tabs for generated files"
  },
  {
    long: "version",
    short: "v",
    value: "label",
    desc: "Use a specific kaplay version (default latest)"
  },
  {
    long: "verbose",
    short: "verb",
    desc: "Print additional information"
  }
], A = _.map((e) => ({
  usage: `${e.short ? `-${e.short},` : "   "} --${e.long}${e.value ? ` <${e.value}>` : ""}`,
  desc: e.desc
})), K = A.reduce((e, t) => t.usage.length > e ? t.usage.length : e, 0), x = `
create-kaplay v${L} ${o}

${c(32, "USAGE ðŸ¦–")}

  $ create-kaplay [OPTIONS] <dir>

${c(32, "OPTIONS")}

  ${A.map(
  (e) => `${c(32, e.usage)} ${" ".repeat(K - e.usage.length)} ${e.desc}`
).join(`
  `)}

${c(32, "EXAMPLE")}
  ${c(90, "# quick start with default config")}
  $ create-kaplay my-game

  ${c(
  90,
  "# calling with options"
)}
  $ create-kaplay --typescript --spaces 4 --desktop --example burp my-game
`.trim(), i = {}, D = [];
e: for (let e = 2; e < process.argv.length; e++) {
  const t = process.argv[e];
  if (t.startsWith("-")) {
    for (const s of _)
      if (t === `--${s.long}` || t === `-${s.short}`) {
        if (s.value) {
          const n = process.argv[++e];
          n || g(`Expected value after ${t}`), i[s.long] = n;
        } else
          i[s.long] = !0;
        continue e;
      }
    g(`Unknown option "${t}"`, !0);
  } else
    D.push(t);
}
i.help && (console.log(x), process.exit());
const a = D[0];
a || (console.log(x), process.exit());
m.existsSync(a) && g(`Directory "${a}" already exists!`);
const w = (e) => JSON.stringify(e, null, i.spaces ? 4 : "	"), h = i.typescript, u = i.desktop, f = h ? "ts" : "js", b = async (e, t) => new Promise((s) => {
  const n = m.createWriteStream(t);
  M.get(e, (r) => {
    r.pipe(n), n.on("finish", () => {
      n.close(), s();
    });
  });
}), $ = async (e, t, s) => (y(`- running ${e} ${t.join(" ")}`), new Promise((n) => {
  const r = I.spawn(e, t, {
    ...s,
    ...O ? { shell: !0 } : {}
  });
  y(`- spawned process ${r.pid} ${e} ${t.join(" ")}`), r.on("exit", n), r.on("error", g);
})), V = (e, t) => {
  const s = JSON.parse(m.readFileSync(e, "utf8"));
  m.writeFileSync(e, w(t(s)));
};
let k = `
import kaplay from "kaplay";
import "kaplay/global";

const k = kaplay()

k.loadSprite("bean", "sprites/bean.png")

k.add([
	k.pos(120, 80),
	k.sprite("bean"),
])

k.onClick(() => k.addKaboom(k.mousePos()))
`.trim();
const F = /load(Sprite|Sound|Shader|Aseprite|Font|BitmapFont)\("([^"]+)",\s*"([^"]+)"\)/gm;
if (i.example) {
  d(`- fetching example "${i.example}"`);
  const e = await fetch(`${v}/examples/${i.example}.js`), t = await e.text();
  e.ok || g(
    `Example "${i.example}" not found. Check https://github.com/marklovers/kaplay/tree/master/examples for available examples`
  ), k = `import kaplay from "kaplay"
import "kaplay/global";

` + t;
}
const P = [];
for (const e of k.matchAll(F)) {
  const [t, s, n, r] = e;
  r.startsWith("/sprites") || P.includes(r.split("/")[2]) || P.push(r.split("/")[2]);
}
const R = [
  `kaplay@${i.version ?? "latest"}`
], N = [
  "vite@latest",
  ...h ? ["typescript@latest"] : [],
  ...u ? ["@tauri-apps/cli@latest"] : []
], p = (e, t) => ({
  type: "file",
  name: e,
  content: t.trim()
}), l = (e, t) => ({
  type: "dir",
  name: e,
  items: t
}), W = (e) => {
  if (e.type === "dir")
    m.mkdirSync(e.name), process.chdir(e.name), e.items.forEach(W), process.chdir("..");
  else if (e.type === "file") {
    const t = i.spaces ? e.content.replaceAll("	", " ".repeat(i.spaces)) : e.content, s = process.cwd().replace(new RegExp(`^${G}/`), "");
    d(`- creating ${s}/${e.name}`), m.writeFileSync(e.name, t);
  }
};
W(l(a, [
  p(
    "package.json",
    w({
      name: a,
      type: "module",
      scripts: {
        build: "vite build",
        dev: "vite",
        preview: "vite preview",
        zip: `${o} run build && mkdir -p dist && zip -r dist/game.zip www -x "**/.DS_Store"`,
        ...h ? {
          check: "tsc"
        } : {},
        ...u ? {
          "dev:desktop": "tauri dev",
          "build:desktop": "tauri build"
        } : {}
      }
    })
  ),
  p(
    `vite.config.${f}`,
    J
  ),
  p(
    "index.html",
    `
<!DOCTYPE html>
<html>
<head>
<title>${a}</title>
</head>
<body style="overflow:hidden">
<script src="src/main.${f}" type="module"><\/script>
</body>
</html>
    `
  ),
  l("public", [
    l("sprites", []),
    // TODO: Create this folders if only needed
    l("examples", [
      l("sprites", []),
      l("sounds", []),
      l("fonts", []),
      l("shaders", [])
    ])
  ]),
  l("src", [
    p(`main.${f}`, k)
  ]),
  p("README.md", ""),
  ...h ? [
    p(
      "tsconfig.json",
      w({
        compilerOptions: {
          noEmit: !0,
          target: "esnext",
          moduleResolution: "node"
        },
        include: [
          "src/**/*.ts"
        ]
      })
    )
  ] : [],
  p(
    ".gitignore",
    `
node_modules/
www/main.js
dist/
${u ? "src-tauri/target/" : ""}
	`
  ),
  p(
    "README.md",
    `
# Folder structure

- \`src\` - source code for your kaplay project
- \`www\` - distribution folder, contains your index.html, built js bundle and static assets
${u ? "- `src-tauri` - tauri project folder, contains tauri config file, icons, rust source if you need native code" : ""}

## Development

\`\`\`sh
$ ${o} run dev
\`\`\`

will start a dev server at http://localhost:8000

## Distribution

\`\`\`sh
$ ${o} run build
\`\`\`

will build your js files into \`www/main.js\`

\`\`\`sh
$ ${o} run bundle
\`\`\`

will build your game and package into a .zip file, you can upload to your server or itch.io / newground etc.

${u ? `
## Desktop

This project uses tauri for desktop builds, you have to have \`rust\` installed on your system for desktop to work, check out [tauri setup guide](https://tauri.app/v1/guides/getting-started/prerequisites/)

For tauri native APIs look [here](https://tauri.app/v1/api/js/)

\`\`\`sh
$ ${o} run dev:desktop
\`\`\`

will start the dev server and a native window that servers content from that dev server

\`\`\`sh
$ ${o} run build:desktop
\`\`\`

will create distributable native app package
` : ""}
	`
  )
]));
process.chdir(a);
d("- downloading example sprites");
for (const e of k.matchAll(F)) {
  const [, t, s, n] = e;
  n.startsWith("sprites") || n.startsWith("/sprites") || n.startsWith("./sprites") ? (d(`- downloading sprite "${s}"`), await b(
    `${v}/assets/${n}`,
    j.join("public", n)
  )) : (d(`- downloading ${t.toLowerCase()} "${s}"`), await b(
    `${v}/examples/${n}`,
    j.join("public", n)
  ));
}
d(`- installing packages ${R.map((e) => `"${e}"`).join(", ")}`);
await $(o, [C, ...R], {
  stdio: ["inherit", "ignore", "inherit"]
});
d(
  `- installing dev packages ${N.map((e) => `"${e}"`).join(", ")}`
);
await $(o, [C, "-D", ...N], {
  stdio: ["inherit", "ignore", "inherit"]
});
u && (d("- starting tauri project for desktop build"), y(`- running ${o} tauri init`), await $(S, [
  "tauri",
  "init",
  "--app-name",
  a,
  "--window-title",
  a,
  "--dist-dir",
  "../dist",
  "--dev-path",
  "http://localhost:8000",
  "--before-dev-command",
  E(`${o} run dev`),
  "--before-build-command",
  E(`${o} run build`),
  "--ci"
], { stdio: "inherit" }), await b(
  "https://raw.githubusercontent.com/marklovers/kaplay/master/assets/sprites/k.png",
  "public/icon.png"
), await $(S, ["tauri", "icon", "public/icon.png"], {
  stdio: "inherit"
}), V("src-tauri/tauri.conf.json", (e) => (e.tauri.bundle.identifier = "com.kaplay.dev", e)));
console.log("");
console.log(`
Success! Now

  $ cd ${a}
  $ ${o} ${q}

and start editing src/main.${f}! ðŸ¦–ðŸ’¥
`.trim());
